#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ApteanEdgeBankDataLayer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ApteanEdgeBank")]
	public partial class ApteanEdgeBankMasterDatabaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertApteanBankBranch(ApteanBankBranch instance);
    partial void UpdateApteanBankBranch(ApteanBankBranch instance);
    partial void DeleteApteanBankBranch(ApteanBankBranch instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    #endregion
		
		public ApteanEdgeBankMasterDatabaseDataContext() : 
				base(global::ApteanEdgeBankDataLayer.Properties.Settings.Default.ApteanEdgeBankConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ApteanEdgeBankMasterDatabaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ApteanEdgeBankMasterDatabaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ApteanEdgeBankMasterDatabaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ApteanEdgeBankMasterDatabaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<ApteanBankBranch> ApteanBankBranches
		{
			get
			{
				return this.GetTable<ApteanBankBranch>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Account")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _AccountId;
		
		private long _CustomerId;
		
		private int _BranchId;
		
		private double _TotalBalance;
		
		private System.DateTime _AccountOpenedDate;
		
		private int _AccountType;
		
		private bool _StatusAccount;
		
		private EntityRef<ApteanBankBranch> _ApteanBankBranch;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccountIdChanging(long value);
    partial void OnAccountIdChanged();
    partial void OnCustomerIdChanging(long value);
    partial void OnCustomerIdChanged();
    partial void OnBranchIdChanging(int value);
    partial void OnBranchIdChanged();
    partial void OnTotalBalanceChanging(double value);
    partial void OnTotalBalanceChanged();
    partial void OnAccountOpenedDateChanging(System.DateTime value);
    partial void OnAccountOpenedDateChanged();
    partial void OnAccountTypeChanging(int value);
    partial void OnAccountTypeChanged();
    partial void OnStatusAccountChanging(bool value);
    partial void OnStatusAccountChanged();
    #endregion
		
		public Account()
		{
			this._ApteanBankBranch = default(EntityRef<ApteanBankBranch>);
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerId", DbType="BigInt NOT NULL")]
		public long CustomerId
		{
			get
			{
				return this._CustomerId;
			}
			set
			{
				if ((this._CustomerId != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerId = value;
					this.SendPropertyChanged("CustomerId");
					this.OnCustomerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BranchId", DbType="Int NOT NULL")]
		public int BranchId
		{
			get
			{
				return this._BranchId;
			}
			set
			{
				if ((this._BranchId != value))
				{
					if (this._ApteanBankBranch.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBranchIdChanging(value);
					this.SendPropertyChanging();
					this._BranchId = value;
					this.SendPropertyChanged("BranchId");
					this.OnBranchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalBalance", DbType="Float NOT NULL")]
		public double TotalBalance
		{
			get
			{
				return this._TotalBalance;
			}
			set
			{
				if ((this._TotalBalance != value))
				{
					this.OnTotalBalanceChanging(value);
					this.SendPropertyChanging();
					this._TotalBalance = value;
					this.SendPropertyChanged("TotalBalance");
					this.OnTotalBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountOpenedDate", DbType="Date NOT NULL")]
		public System.DateTime AccountOpenedDate
		{
			get
			{
				return this._AccountOpenedDate;
			}
			set
			{
				if ((this._AccountOpenedDate != value))
				{
					this.OnAccountOpenedDateChanging(value);
					this.SendPropertyChanging();
					this._AccountOpenedDate = value;
					this.SendPropertyChanged("AccountOpenedDate");
					this.OnAccountOpenedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountType", DbType="Int NOT NULL")]
		public int AccountType
		{
			get
			{
				return this._AccountType;
			}
			set
			{
				if ((this._AccountType != value))
				{
					this.OnAccountTypeChanging(value);
					this.SendPropertyChanging();
					this._AccountType = value;
					this.SendPropertyChanged("AccountType");
					this.OnAccountTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusAccount", DbType="Bit NOT NULL")]
		public bool StatusAccount
		{
			get
			{
				return this._StatusAccount;
			}
			set
			{
				if ((this._StatusAccount != value))
				{
					this.OnStatusAccountChanging(value);
					this.SendPropertyChanging();
					this._StatusAccount = value;
					this.SendPropertyChanged("StatusAccount");
					this.OnStatusAccountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ApteanBankBranch_Account", Storage="_ApteanBankBranch", ThisKey="BranchId", OtherKey="BranchId", IsForeignKey=true)]
		public ApteanBankBranch ApteanBankBranch
		{
			get
			{
				return this._ApteanBankBranch.Entity;
			}
			set
			{
				ApteanBankBranch previousValue = this._ApteanBankBranch.Entity;
				if (((previousValue != value) 
							|| (this._ApteanBankBranch.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ApteanBankBranch.Entity = null;
						previousValue.Accounts.Remove(this);
					}
					this._ApteanBankBranch.Entity = value;
					if ((value != null))
					{
						value.Accounts.Add(this);
						this._BranchId = value.BranchId;
					}
					else
					{
						this._BranchId = default(int);
					}
					this.SendPropertyChanged("ApteanBankBranch");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Account", Storage="_Customer", ThisKey="CustomerId", OtherKey="CustomerId", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Accounts.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Accounts.Add(this);
						this._CustomerId = value.CustomerId;
					}
					else
					{
						this._CustomerId = default(long);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ApteanBankBranch")]
	public partial class ApteanBankBranch : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BranchId;
		
		private string _BranchName;
		
		private double _TotalBalance;
		
		private EntitySet<Account> _Accounts;
		
		private EntitySet<Customer> _Customers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBranchIdChanging(int value);
    partial void OnBranchIdChanged();
    partial void OnBranchNameChanging(string value);
    partial void OnBranchNameChanged();
    partial void OnTotalBalanceChanging(double value);
    partial void OnTotalBalanceChanged();
    #endregion
		
		public ApteanBankBranch()
		{
			this._Accounts = new EntitySet<Account>(new Action<Account>(this.attach_Accounts), new Action<Account>(this.detach_Accounts));
			this._Customers = new EntitySet<Customer>(new Action<Customer>(this.attach_Customers), new Action<Customer>(this.detach_Customers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BranchId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BranchId
		{
			get
			{
				return this._BranchId;
			}
			set
			{
				if ((this._BranchId != value))
				{
					this.OnBranchIdChanging(value);
					this.SendPropertyChanging();
					this._BranchId = value;
					this.SendPropertyChanged("BranchId");
					this.OnBranchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BranchName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string BranchName
		{
			get
			{
				return this._BranchName;
			}
			set
			{
				if ((this._BranchName != value))
				{
					this.OnBranchNameChanging(value);
					this.SendPropertyChanging();
					this._BranchName = value;
					this.SendPropertyChanged("BranchName");
					this.OnBranchNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalBalance", DbType="Float NOT NULL")]
		public double TotalBalance
		{
			get
			{
				return this._TotalBalance;
			}
			set
			{
				if ((this._TotalBalance != value))
				{
					this.OnTotalBalanceChanging(value);
					this.SendPropertyChanging();
					this._TotalBalance = value;
					this.SendPropertyChanged("TotalBalance");
					this.OnTotalBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ApteanBankBranch_Account", Storage="_Accounts", ThisKey="BranchId", OtherKey="BranchId")]
		public EntitySet<Account> Accounts
		{
			get
			{
				return this._Accounts;
			}
			set
			{
				this._Accounts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ApteanBankBranch_Customer", Storage="_Customers", ThisKey="BranchId", OtherKey="customerBranchId")]
		public EntitySet<Customer> Customers
		{
			get
			{
				return this._Customers;
			}
			set
			{
				this._Customers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.ApteanBankBranch = this;
		}
		
		private void detach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.ApteanBankBranch = null;
		}
		
		private void attach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.ApteanBankBranch = this;
		}
		
		private void detach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.ApteanBankBranch = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _CustomerId;
		
		private string _CustomerName;
		
		private System.DateTime _DateOpened;
		
		private int _customerBranchId;
		
		private EntitySet<Account> _Accounts;
		
		private EntityRef<ApteanBankBranch> _ApteanBankBranch;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerIdChanging(long value);
    partial void OnCustomerIdChanged();
    partial void OnCustomerNameChanging(string value);
    partial void OnCustomerNameChanged();
    partial void OnDateOpenedChanging(System.DateTime value);
    partial void OnDateOpenedChanged();
    partial void OncustomerBranchIdChanging(int value);
    partial void OncustomerBranchIdChanged();
    #endregion
		
		public Customer()
		{
			this._Accounts = new EntitySet<Account>(new Action<Account>(this.attach_Accounts), new Action<Account>(this.detach_Accounts));
			this._ApteanBankBranch = default(EntityRef<ApteanBankBranch>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long CustomerId
		{
			get
			{
				return this._CustomerId;
			}
			set
			{
				if ((this._CustomerId != value))
				{
					this.OnCustomerIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerId = value;
					this.SendPropertyChanged("CustomerId");
					this.OnCustomerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string CustomerName
		{
			get
			{
				return this._CustomerName;
			}
			set
			{
				if ((this._CustomerName != value))
				{
					this.OnCustomerNameChanging(value);
					this.SendPropertyChanging();
					this._CustomerName = value;
					this.SendPropertyChanged("CustomerName");
					this.OnCustomerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOpened", DbType="Date NOT NULL")]
		public System.DateTime DateOpened
		{
			get
			{
				return this._DateOpened;
			}
			set
			{
				if ((this._DateOpened != value))
				{
					this.OnDateOpenedChanging(value);
					this.SendPropertyChanging();
					this._DateOpened = value;
					this.SendPropertyChanged("DateOpened");
					this.OnDateOpenedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_customerBranchId", DbType="Int NOT NULL")]
		public int customerBranchId
		{
			get
			{
				return this._customerBranchId;
			}
			set
			{
				if ((this._customerBranchId != value))
				{
					if (this._ApteanBankBranch.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncustomerBranchIdChanging(value);
					this.SendPropertyChanging();
					this._customerBranchId = value;
					this.SendPropertyChanged("customerBranchId");
					this.OncustomerBranchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Account", Storage="_Accounts", ThisKey="CustomerId", OtherKey="CustomerId")]
		public EntitySet<Account> Accounts
		{
			get
			{
				return this._Accounts;
			}
			set
			{
				this._Accounts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ApteanBankBranch_Customer", Storage="_ApteanBankBranch", ThisKey="customerBranchId", OtherKey="BranchId", IsForeignKey=true)]
		public ApteanBankBranch ApteanBankBranch
		{
			get
			{
				return this._ApteanBankBranch.Entity;
			}
			set
			{
				ApteanBankBranch previousValue = this._ApteanBankBranch.Entity;
				if (((previousValue != value) 
							|| (this._ApteanBankBranch.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ApteanBankBranch.Entity = null;
						previousValue.Customers.Remove(this);
					}
					this._ApteanBankBranch.Entity = value;
					if ((value != null))
					{
						value.Customers.Add(this);
						this._customerBranchId = value.BranchId;
					}
					else
					{
						this._customerBranchId = default(int);
					}
					this.SendPropertyChanged("ApteanBankBranch");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
}
#pragma warning restore 1591
